#ifndef FIBONACCI_NUMBERS_SUM_HPP_
#define FIBONACCI_NUMBERS_SUM_HPP_

// https://projecteuler.net/problem=2
// Problem 2:
// Each new term in the Fibonacci sequence is generated by adding the previous
// two terms. By starting with 1 and 2, the first 10 terms will be:
// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

// By considering the terms in the Fibonacci sequence whose values
// do not exceed four million, find the sum of the even-valued terms.

#include <vector>

namespace FibNumSum {

class Solution {
public:
    size_t SumOfFibNums() {
        // Create Fibonacci sequence
        std::vector<size_t> fibNums;
        fibNums.push_back(1);
        fibNums.push_back(2);

        size_t newNum = fibNums[0] + fibNums[1];
        do {
            fibNums.push_back(newNum);

            size_t lastInd = fibNums.size() - 1;
            newNum = fibNums[lastInd] + fibNums[lastInd - 1];
        }
        while (newNum < 4000000);

        // Summ even numbers
        size_t summ = 0;
        for ( size_t i = 0; i < fibNums.size(); ++i ) {
            if (0 == fibNums[i] % 2) {
                summ += fibNums[i];
            }
        }

        return summ;
    }
};

}

#endif // FIBONACCI_NUMBERS_SUM_HPP_
